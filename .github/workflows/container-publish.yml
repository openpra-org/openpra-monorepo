name: "Containers: Build & Publish (GHCR)"

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  OWNER: ${{ github.repository_owner }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20.17.0'

      - name: Install pnpm
        run: npm install -g pnpm@10.18.2

      - name: Install dependencies
        run: pnpm install --ignore-scripts --no-frozen-lockfile

      - name: Build server apps
        run: |
          pnpm nx build web-backend
          pnpm nx build microservice-job-broker
          pnpm nx run frontend-web-editor:build:production

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare tags
        id: prep
        run: |
          REPO_LOWER=$(echo "${OWNER}" | tr '[:upper:]' '[:lower:]')
          echo "repo_lower=$REPO_LOWER" >> $GITHUB_OUTPUT
          BRANCH_SLUG="${GITHUB_HEAD_REF:-${GITHUB_REF_NAME}}"
          BRANCH_SLUG=${BRANCH_SLUG//\//-}
          echo "branch_slug=$BRANCH_SLUG" >> $GITHUB_OUTPUT
          SHORT_SHA=${GITHUB_SHA::7}
          echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT
          if [ "${GITHUB_REF}" = "refs/heads/main" ]; then
            echo "is_main=true" >> $GITHUB_OUTPUT
            echo "channel_tag=latest" >> $GITHUB_OUTPUT
          else
            echo "is_main=false" >> $GITHUB_OUTPUT
            echo "channel_tag=preview" >> $GITHUB_OUTPUT
          fi

      - name: Prepare web-backend build context
        run: |
          mkdir -p docker-context/web-backend
          cp -r dist/packages/web-backend/* docker-context/web-backend/
          # Ensure package.json has no workspace: protocol deps for container installs
          node -e '
            const fs=require("fs"); const pth="docker-context/web-backend/package.json";
            const pkg=JSON.parse(fs.readFileSync(pth,"utf8"));
            if(pkg.dependencies){ for(const [k,v] of Object.entries({...pkg.dependencies})) if(typeof v==="string" && v.startsWith("workspace:")) delete pkg.dependencies[k]; }
            if(pkg.devDependencies){ for(const [k,v] of Object.entries({...pkg.devDependencies})) if(typeof v==="string" && v.startsWith("workspace:")) delete pkg.devDependencies[k]; }
            fs.writeFileSync(pth, JSON.stringify(pkg,null,2));
          '
          cat > docker-context/web-backend/Dockerfile <<'EOF'
          FROM node:20-slim
          WORKDIR /app
          # Use pnpm with pruned lockfile generated by Nx
          RUN corepack enable && corepack prepare pnpm@10.18.2 --activate
          ENV PNPM_ENABLE_PREPOSTINSTALL_SCRIPTS=true
          COPY package.json ./
          RUN pnpm install --prod --no-frozen-lockfile
          # Copy application files
          COPY . ./
          ENV NODE_ENV=production
          EXPOSE 8000
          CMD ["node","main.js"]
          EOF

      - name: Prepare job-broker build context
        run: |
          mkdir -p docker-context/job-broker
          cp -r dist/packages/microservice/job-broker/* docker-context/job-broker/
          # Ensure package.json has no workspace: protocol deps for container installs
          node -e '
            const fs=require("fs"); const pth="docker-context/job-broker/package.json";
            const pkg=JSON.parse(fs.readFileSync(pth,"utf8"));
            if(pkg.dependencies){ for(const [k,v] of Object.entries({...pkg.dependencies})) if(typeof v==="string" && v.startsWith("workspace:")) delete pkg.dependencies[k]; }
            if(pkg.devDependencies){ for(const [k,v] of Object.entries({...pkg.devDependencies})) if(typeof v==="string" && v.startsWith("workspace:")) delete pkg.devDependencies[k]; }
            fs.writeFileSync(pth, JSON.stringify(pkg,null,2));
          '
          cat > docker-context/job-broker/Dockerfile <<'EOF'
          FROM node:20-slim
          WORKDIR /app
          RUN corepack enable && corepack prepare pnpm@10.18.2 --activate
          ENV PNPM_ENABLE_PREPOSTINSTALL_SCRIPTS=true
          COPY package.json ./
          RUN pnpm install --prod --no-frozen-lockfile
          COPY . ./
          ENV NODE_ENV=production
          EXPOSE 3000
          CMD ["node","main.js"]
          EOF

      - name: Build and push web-backend image
        uses: docker/build-push-action@v6
        with:
          context: docker-context/web-backend
          file: docker-context/web-backend/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ steps.prep.outputs.repo_lower }}/openpra-web-backend:${{ steps.prep.outputs.short_sha }}
            ${{ env.REGISTRY }}/${{ steps.prep.outputs.repo_lower }}/openpra-web-backend:${{ steps.prep.outputs.branch_slug }}
            ${{ env.REGISTRY }}/${{ steps.prep.outputs.repo_lower }}/openpra-web-backend:${{ steps.prep.outputs.channel_tag }}

      - name: Build and push job-broker image
        uses: docker/build-push-action@v6
        with:
          context: docker-context/job-broker
          file: docker-context/job-broker/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ steps.prep.outputs.repo_lower }}/openpra-job-broker:${{ steps.prep.outputs.short_sha }}
            ${{ env.REGISTRY }}/${{ steps.prep.outputs.repo_lower }}/openpra-job-broker:${{ steps.prep.outputs.branch_slug }}
            ${{ env.REGISTRY }}/${{ steps.prep.outputs.repo_lower }}/openpra-job-broker:${{ steps.prep.outputs.channel_tag }}

      - name: Prepare frontend build context
        run: |
          mkdir -p docker-context/frontend
          cp -r dist/packages/frontend/web-editor/* docker-context/frontend/
          cat > docker-context/frontend/nginx-frontend.conf <<'EOF'
          server {
            listen 80;
            server_name _;
            root /usr/share/nginx/html;
            index index.html;
            location / {
              try_files $uri $uri/ /index.html;
            }
            location = /404.html {
              internal;
            }
          }
          EOF
          cat > docker-context/frontend/Dockerfile <<'EOF'
          FROM nginx:1.25-alpine
          COPY nginx-frontend.conf /etc/nginx/conf.d/default.conf
          COPY . /usr/share/nginx/html/
          EXPOSE 80
          EOF

      - name: Build and push frontend image
        uses: docker/build-push-action@v6
        with:
          context: docker-context/frontend
          file: docker-context/frontend/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ steps.prep.outputs.repo_lower }}/openpra-frontend:${{ steps.prep.outputs.short_sha }}
            ${{ env.REGISTRY }}/${{ steps.prep.outputs.repo_lower }}/openpra-frontend:${{ steps.prep.outputs.branch_slug }}
            ${{ env.REGISTRY }}/${{ steps.prep.outputs.repo_lower }}/openpra-frontend:${{ steps.prep.outputs.channel_tag }}
