name: "CI: Lint Canary"

on:
  pull_request:
    branches:
      - "**"

permissions:
  contents: read
  pull-requests: write

jobs:
  lint-canary:
    runs-on: ubuntu-latest
    concurrency:
      group: lint-canary-${{ github.head_ref || github.ref }}
      cancel-in-progress: true
    timeout-minutes: 20
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: "20.17.0"

      - name: Ensure pnpm available
        run: npx -y pnpm@10.19.0 --version

      - name: Install dependencies (skip scripts)
        run: npx -y pnpm@10.19.0 install --ignore-scripts --no-frozen-lockfile

      - name: Run canary lint (non-blocking)
        shell: bash
        continue-on-error: true
        # env:
        #   NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}  # (disabled)
        #   NX_BRANCH: ${{ github.ref_name }}                             # (disabled)
        #   NX_RUN_GROUP: lint-canary-${{ github.run_id }}                # (disabled)
        run: |
          set -o pipefail
          npx -y pnpm@10.19.0 -w run lint:canary:all | tee lint-canary.txt

      - name: Upload canary lint artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-canary
          path: |
            lint-canary.txt

      - name: Comment summary on PR
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let body = `Canary ESLint (ESLint 9 flat-config) run completed.\n\n`;
            try {
              const log = fs.readFileSync('lint-canary.txt', 'utf8');
              // Try to extract the Nx summary line
              const summaryLine = (log.split('\n').reverse().find(l => l.includes('Successfully ran target lint-canary')) || '').trim();
              if (summaryLine) {
                body += `Summary: ${summaryLine}\n\n`;
              }
              // Aggregate ESLint problem counts across packages if present
              const problemRe = /\u2716\s+(\d+)\s+problems? \((\d+) errors?,\s*(\d+) warnings?\)/gi; // matches lines like: ✖ 12 problems (3 errors, 9 warnings)
              let totalProblems = 0, totalErrors = 0, totalWarnings = 0;
              for (const m of log.matchAll(problemRe)) {
                totalProblems += Number(m[1] || 0);
                totalErrors += Number(m[2] || 0);
                totalWarnings += Number(m[3] || 0);
              }
              if (totalProblems > 0) {
                body += `ESLint totals: ${totalProblems} problems (${totalErrors} errors, ${totalWarnings} warnings).\n\n`;
              }
              // List failed packages from the Nx table (lines starting with ✖ and containing :lint-canary)
              const failed = new Set();
              for (const line of log.split('\n')) {
                if (line.includes(':lint-canary') && /\u2716/.test(line)) {
                  const match = line.match(/\u2716\s+([a-z0-9\-]+):lint-canary/i);
                  if (match && match[1]) failed.add(match[1]);
                }
              }
              if (failed.size > 0) {
                body += `Failed packages: ${Array.from(failed).join(', ')}\n\n`;
              }
            } catch (e) {
              // ignore
            }
            body += `Artifacts: lint-canary.txt uploaded (see workflow artifacts).`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body,
            });
