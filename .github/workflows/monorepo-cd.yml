# .github/workflows/monorepo-cd.yml
name: monorepo-cd          # deploy every branch

on:
  push:
    branches: ['**']       # all branches
  workflow_dispatch:       # manual / customised deploy
    inputs:
      host_performance:
        description: Host-performance constraint (informational)
        type: choice
        options: [any, low, medium, high]
        default: any
      num_workers:
        description: "Workers replicas (auto = 1, min 2, max 1024; main → 32, others → 2)"
        default: "1"
      num_brokers:
        description: "Brokers replicas (auto = 1, min 2, max 8; main → 3, others → 2)"
        default: "1"
      num_backends:
        description: "Back-end replicas (auto = 1, min 2, max 8; main → 3, others → 2)"
        default: "1"
      num_frontends:
        description: "Front-end replicas (auto = 1, min 2, max 8; main → 3, others → 1)"
        default: "1"

env:
  REGISTRY:          packages-space.openpra.org/p/openpra/containers
  IMAGE_NAME:        openpra-monorepo
  HAS_SWARM_KEY:     ${{ secrets.SWARM_SSH_KEY != '' }}
  HAS_SWARM_HOST:    ${{ secrets.SWARM_MANAGER_HOST != '' }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # ───────────────────────── derive branch-aware variables
      - name: Derive deployment variables
        id: vars
        shell: bash
        env:
          INPUT_NUM_WORKERS:   ${{ github.event.inputs.num_workers   || '1' }}
          INPUT_NUM_BROKERS:   ${{ github.event.inputs.num_brokers   || '1' }}
          INPUT_NUM_BACKENDS:  ${{ github.event.inputs.num_backends  || '1' }}
          INPUT_NUM_FRONTENDS: ${{ github.event.inputs.num_frontends || '1' }}
        run: |
          set -eu
          # branch slug (<=32 chars, a-z0-9-)
          RAW="${GITHUB_REF#refs/heads/}"
          SLUG=$(echo "${RAW,,}" | sed -E 's/[^a-z0-9-]+/-/g' | sed -E 's/-+/-/g' | cut -c1-32)

          if [[ "$SLUG" == "main" ]]; then
            BRANCH_SLUG="v2-app"
            BUILD_TYPE="production"
            NUM_WORKERS=${INPUT_NUM_WORKERS};   [[ $NUM_WORKERS  -le 1 ]] && NUM_WORKERS=32
            NUM_BROKERS=${INPUT_NUM_BROKERS};   [[ $NUM_BROKERS  -le 1 ]] && NUM_BROKERS=3
            NUM_BACKENDS=${INPUT_NUM_BACKENDS}; [[ $NUM_BACKENDS -le 1 ]] && NUM_BACKENDS=3
            NUM_FRONTENDS=${INPUT_NUM_FRONTENDS};[[ $NUM_FRONTENDS -le 1 ]] && NUM_FRONTENDS=3

            WORKER_POOL='node.labels.min_host_performance == low'
            BROKER_POOL='node.labels.max_host_performance != low'
            BACKEND_POOL='node.labels.max_host_performance != low'
            FRONTEND_POOL='node.labels.min_host_performance == low'
          else
            BRANCH_SLUG="app-review-$SLUG"
            BUILD_TYPE="development"
            NUM_WORKERS=${INPUT_NUM_WORKERS};   [[ $NUM_WORKERS  -le 1 ]] && NUM_WORKERS=2
            NUM_BROKERS=${INPUT_NUM_BROKERS};   [[ $NUM_BROKERS  -le 1 ]] && NUM_BROKERS=2
            NUM_BACKENDS=${INPUT_NUM_BACKENDS}; [[ $NUM_BACKENDS -le 1 ]] && NUM_BACKENDS=2
            NUM_FRONTENDS=${INPUT_NUM_FRONTENDS};[[ $NUM_FRONTENDS -le 1 ]] && NUM_FRONTENDS=1

            WORKER_POOL='node.labels.min_host_performance == low'
            BROKER_POOL='node.labels.min_host_performance == low'
            BACKEND_POOL='node.labels.min_host_performance == low'
            FRONTEND_POOL='node.labels.min_host_performance == low'
          fi

          # hard limits
          [[ $NUM_WORKERS   -gt 1024 ]] && NUM_WORKERS=1024
          [[ $NUM_BROKERS   -gt 8    ]] && NUM_BROKERS=8
          [[ $NUM_BACKENDS  -gt 8    ]] && NUM_BACKENDS=8
          [[ $NUM_FRONTENDS -gt 8    ]] && NUM_FRONTENDS=8

          {
            echo "branch_slug=$BRANCH_SLUG"
            echo "build_type=$BUILD_TYPE"
            echo "num_workers=$NUM_WORKERS"
            echo "num_brokers=$NUM_BROKERS"
            echo "num_backends=$NUM_BACKENDS"
            echo "num_frontends=$NUM_FRONTENDS"
            echo "worker_pool_constraint=$WORKER_POOL"
            echo "broker_pool_constraint=$BROKER_POOL"
            echo "backend_pool_constraint=$BACKEND_POOL"
            echo "frontend_pool_constraint=$FRONTEND_POOL"
          } >>"$GITHUB_OUTPUT"

      # ───────────────────────── registry login
      - name: Log in to container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.OPENPRA_DOCKER_REGISTRY_USERNAME }}
          password: ${{ secrets.OPENPRA_DOCKER_REGISTRY_PASSWORD }}

      # ───────────────────────── build + push deploy image
      - name: Build & push deploy image
        shell: bash
        env:
          REGISTRY:    ${{ env.REGISTRY }}
          IMAGE_NAME:  ${{ env.IMAGE_NAME }}
          BRANCH_SLUG: ${{ steps.vars.outputs.branch_slug }}
          BUILD_TYPE:  ${{ steps.vars.outputs.build_type }}
        run: |
          set -e
          REMOTE="${REGISTRY}/${IMAGE_NAME}"
          docker pull "$REMOTE:deploy-${BRANCH_SLUG}" || true
          docker build \
            --build-arg BUILD_TYPE=$BUILD_TYPE \
            --tag "$REMOTE:deploy-${BRANCH_SLUG}" \
            -f docker/Dockerfile .
          docker push "$REMOTE:deploy-${BRANCH_SLUG}"

      # ───────────────────────── SSH for Swarm
      - name: Add SSH key
        if: env.HAS_SWARM_KEY == 'true'
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SWARM_SSH_KEY }}

      # ───────────────────────── swarm stack deploy
      - name: Deploy stack on Swarm manager
        if: env.HAS_SWARM_HOST == 'true'
        shell: bash
        env:
          DOCKER_HOST:  "ssh://swarm@${{ secrets.SWARM_MANAGER_HOST }}"
          STACK_YML:    docker/stack.yml

          REGISTRY:     ${{ env.REGISTRY }}
          IMAGE_NAME:   ${{ env.IMAGE_NAME }}
          BRANCH_SLUG:  ${{ steps.vars.outputs.branch_slug }}

          NUM_WORKERS:  ${{ steps.vars.outputs.num_workers }}
          NUM_BROKERS:  ${{ steps.vars.outputs.num_brokers }}
          NUM_BACKENDS: ${{ steps.vars.outputs.num_backends }}
          NUM_FRONTENDS: ${{ steps.vars.outputs.num_frontends }}

          WORKER_POOL_CONSTRAINT:  ${{ steps.vars.outputs.worker_pool_constraint }}
          BROKER_POOL_CONSTRAINT:  ${{ steps.vars.outputs.broker_pool_constraint }}
          BACKEND_POOL_CONSTRAINT: ${{ steps.vars.outputs.backend_pool_constraint }}
          FRONTEND_POOL_CONSTRAINT: ${{ steps.vars.outputs.frontend_pool_constraint }}

          APP_DOMAIN:   ${{ vars.APP_DOMAIN }}
          SHARED_PATH:  ${{ vars.SHARED_VOLUME_PATH }}
          APP_JWT_SECRET: ${{ secrets.APP_JWT_SECRET_KEY }}
        run: |
          set -e
          REMOTE="${REGISTRY}/${IMAGE_NAME}"
          APP_NAME="v2-${BRANCH_SLUG}"
          HOST_URL="${BRANCH_SLUG}.${APP_DOMAIN}"
          ENV_SHARED_VOLUME_PATH="${SHARED_PATH}/openpra-app/v2/${BRANCH_SLUG}/volumes"

          mkdir -p docker/secrets
          printf '%s\n' "$APP_JWT_SECRET" > docker/secrets/DSF_JWT_SECRET

          docker -H "$DOCKER_HOST" compose -f "$STACK_YML" config
          docker -H "$DOCKER_HOST" stack deploy --with-registry-auth -c "$STACK_YML" "$APP_NAME"