# .github/workflows/monorepo-ci.yml
name: monorepo-ci

on:
  push:
    branches: ['**']     # all branches
  pull_request:

env:
  REGISTRY:   packages-space.openpra.org/p/openpra/containers
  IMAGE_NAME: openpra-monorepo

# ----------------------------------------------------------------------
jobs:
# ----------------------------------------------------------------------
  build-image:
    runs-on: ubuntu-latest

    outputs:
      branch_slug: ${{ steps.vars.outputs.branch_slug }}
      build_type:  ${{ steps.vars.outputs.build_type }}

    steps:
      - uses: actions/checkout@v4

      - name: Compute branch-aware variables
        id: vars
        shell: bash
        run: |
          BRANCH_RAW="${GITHUB_REF#refs/heads/}"
          SLUG=$(echo "${BRANCH_RAW,,}" | sed -E 's/[^a-z0-9-]+/-/g' | sed -E 's/-+/-/g' | cut -c1-32)
          if [ "$SLUG" = "main" ]; then
            echo "branch_slug=v2-app"             >> "$GITHUB_OUTPUT"
            echo "build_type=production"          >> "$GITHUB_OUTPUT"
          else
            echo "branch_slug=app-review-$SLUG"   >> "$GITHUB_OUTPUT"
            echo "build_type=development"         >> "$GITHUB_OUTPUT"
          fi

      - name: Log in to registry
        uses: docker/login-action@v4
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.OPENPRA_DOCKER_REGISTRY_USERNAME }}
          password: ${{ secrets.OPENPRA_DOCKER_REGISTRY_PASSWORD }}

      - name: Build & push image
        shell: bash
        env:
          BRANCH_SLUG: ${{ steps.vars.outputs.branch_slug }}
          BUILD_TYPE:  ${{ steps.vars.outputs.build_type }}
        run: |
          REMOTE="$REGISTRY/$IMAGE_NAME"
          docker pull "$REMOTE:$BRANCH_SLUG" || true
          docker build \
            --build-arg BUILD_TYPE=$BUILD_TYPE \
            --tag "$REMOTE:$BRANCH_SLUG" \
            --tag "$REMOTE:ci-${GITHUB_RUN_NUMBER}-$BRANCH_SLUG" \
            -f docker/Dockerfile .
          docker push "$REMOTE:ci-${GITHUB_RUN_NUMBER}-$BRANCH_SLUG"

# ----------------------------------------------------------------------
  nx-matrix:
    needs: build-image
    runs-on: ubuntu-latest

    env:
      BRANCH_SLUG: ${{ needs.build-image.outputs.branch_slug }}

    strategy:
      fail-fast: false
      matrix:
        target:
          - frontend-web-editor:build
          - frontend-web-editor:test
          - frontend-web-editor:e2e
          - frontend-web-editor:lint
          - web-backend:build
          - web-backend:test
          - web-backend:e2e
          - web-backend:lint
          - shared-types:build
          - shared-types:test
          - shared-types:lint
          - model-generator:build
          - model-generator:test
          - model-generator:lint
          - scram-node:build
          - scram-node:test
          - scram-node:ctest
          - scram-node:lint
          - mef-schema:build
          - mef-schema:test
          - mef-schema:lint
          - microservice-job-broker:build
          - microservice-job-broker:test
          - microservice-job-broker:e2e
          - microservice-job-broker:lint

    steps:
      - name: Log in to registry
        uses: docker/login-action@v4
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.OPENPRA_DOCKER_REGISTRY_USERNAME }}
          password: ${{ secrets.OPENPRA_DOCKER_REGISTRY_PASSWORD }}

      - name: Run Nx ${{ matrix.target }}
        continue-on-error: ${{ contains(matrix.target, ':test') || contains(matrix.target, ':e2e') || contains(matrix.target, ':lint') }}
        shell: bash
        run: |
          REMOTE="$REGISTRY/$IMAGE_NAME"
          IMAGE_TAG="ci-${GITHUB_RUN_NUMBER}-${BRANCH_SLUG}"
          docker pull "$REMOTE:$IMAGE_TAG"
          docker run --rm "$REMOTE:$IMAGE_TAG" nx run ${{ matrix.target }}