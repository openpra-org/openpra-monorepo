name: monorepo-ci
on:
  push:
    branches: [ main, '**' ]
  pull_request:

env:
  REGISTRY: packages-space.openpra.org/p/openpra/containers
  IMAGE_NAME: openpra-monorepo
  REMOTE: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

jobs:
  build-image:
  runs-on: ubuntu-latest
outputs:
branch_slug: ${{ steps.vars.outputs.branch_slug }}
build_type:  ${{ steps.vars.outputs.build_type }}
steps:
- uses: actions/checkout@v3
- name: Compute branch-aware variables
  id: vars
  shell: bash
  run: |
    BRANCH_RAW="${GITHUB_REF#refs/heads/}"
    # slugify   — keep a-z 0-9 and '-', collapse dups, to-lower, max 32
    SLUG=$(echo "${BRANCH_RAW,,}" | sed -E 's/[^a-z0-9-]+/-/g' | sed -E 's/-+/-/g' | cut -c1-32)

    if [ "$SLUG" = "main" ]; then
      echo "branch_slug=v2-app"    >> $GITHUB_OUTPUT
      echo "build_type=production" >> $GITHUB_OUTPUT
      echo "debug_mode=false"      >> $GITHUB_OUTPUT
    else
      echo "branch_slug=app-review-$SLUG" >> $GITHUB_OUTPUT
      echo "build_type=development"       >> $GITHUB_OUTPUT
      echo "debug_mode=true"              >> $GITHUB_OUTPUT
    fi

- name: Log-in to container registry
  uses: docker/login-action@v3
  with:
    registry: ${{ env.REGISTRY }}
    username: ${{ secrets.REGISTRY_USERNAME }}
    password: ${{ secrets.REGISTRY_PASSWORD }}

- name: Build & push image
  env:
    BRANCH_SLUG: ${{ steps.vars.outputs.branch_slug }}
    BUILD_TYPE:  ${{ steps.vars.outputs.build_type }}
  shell: bash
  run: |
    # try to reuse layers
    docker pull "$REMOTE:$BRANCH_SLUG" || true

    docker build \
      --build-arg BUILD_TYPE=$BUILD_TYPE \
      --tag "$REMOTE:$BRANCH_SLUG" \
      --tag "$REMOTE:ci-${{ github.run_number }}-$BRANCH_SLUG" \
      -f docker/Dockerfile .

    docker push "$REMOTE:ci-${{ github.run_number }}-$BRANCH_SLUG"
nx-matrix:
needs: build-image
runs-on: ubuntu-latest
env:
BRANCH_SLUG: ${{ needs.build-image.outputs.branch_slug }}
strategy:
fail-fast: false
matrix:
target:
- frontend-web-editor:build
- frontend-web-editor:test
- frontend-web-editor:e2e
- frontend-web-editor:lint
- web-backend:build
- web-backend:test
- web-backend:e2e
- web-backend:lint
- shared-types:build
- shared-types:test
- shared-types:lint
- model-generator:build
- model-generator:test
- model-generator:lint
- scram-node:build
- scram-node:test
- scram-node:ctest
- scram-node:lint
- mef-schema:build
- mef-schema:test
- mef-schema:lint
- microservice-job-broker:build
- microservice-job-broker:test
- microservice-job-broker:e2e
- microservice-job-broker:lint
steps:
  - name: Log-in to container registry
    uses: docker/login-action@v3
    with:
      registry: ${{ env.REGISTRY }}
      username: ${{ secrets.REGISTRY_USERNAME }}
      password: ${{ secrets.REGISTRY_PASSWORD }}

  - name: Run Nx ${{ matrix.target }}
    shell: bash
    env:
      IMAGE_TAG: ci-${{ github.run_number }}-${{ env.BRANCH_SLUG }}
    # keep parity with original “|| true” (tests/e2e/lint shouldn’t fail build)
    continue-on-error: ${{ contains(matrix.target, ':test') || contains(matrix.target, ':e2e') || contains(matrix.target, ':lint') }}
    run: |
      docker pull "$REMOTE:$IMAGE_TAG"
      docker run --rm "$REMOTE:$IMAGE_TAG" nx run ${{ matrix.target }}