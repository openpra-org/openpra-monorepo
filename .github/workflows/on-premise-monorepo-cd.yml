name: Monorepo CD (deploy)

# fire on every push so that review branches are updated as well.
on:
  push:
    branches: ['**']
  workflow_dispatch: {}

env:
  REGISTRY:  packages-space.openpra.org/p/openpra/containers
  IMAGE_NAME: openpra-monorepo
  STACK_YML: docker/stack.yml

jobs:
  deploy:
    runs-on: [self-hosted, swarm-manager]

    steps:
      - uses: actions/checkout@v4

      - id: vars
        shell: bash
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          BRANCH_SLUG=$(echo "$BRANCH_NAME" | tr '[:upper:]' '[:lower:]' |
                        sed -E 's/[^a-z0-9-]+/-/g' | sed -E 's/-+/-/g' |
                        cut -c1-32)

          if [[ "$BRANCH_NAME" == "main" ]]; then
            BRANCH_SLUG="v2-app"
            BUILD_TYPE="production"
          else
            BRANCH_SLUG="app-review-${BRANCH_SLUG}"
            BUILD_TYPE="development"
          fi

          echo "BRANCH_SLUG=$BRANCH_SLUG" >> $GITHUB_ENV
          echo "BUILD_TYPE=$BUILD_TYPE"   >> $GITHUB_ENV

      - name: Log in to registry
        uses: docker/login-action@v3
        with:
          registry: packages-space.openpra.org
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build & push deploy image
        shell: bash
        run: |
          REMOTE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          TAG="deploy-${BRANCH_SLUG}"

          docker pull "${REMOTE}:${TAG}" || true
          docker build --build-arg BUILD_TYPE="${BUILD_TYPE}" \
                       -f ./docker/Dockerfile \
                       --tag "${REMOTE}:${TAG}" .
          docker push "${REMOTE}:${TAG}"

      # --- replicate directory + secret file creation -------------------
      - name: Prepare shared volume folders & secret files
        shell: bash
        env:
          VOL:  ${{ secrets.SHARED_VOLUME_PATH }}/openpra-app/v2/${{ env.BRANCH_SLUG }}/volumes
        run: |
          mkdir -p "$VOL/mongodb" "$VOL/rabbitmq" docker/secrets
          echo "${{ secrets.APP_JWT_SECRET_KEY }}" > docker/secrets/DSF_JWT_SECRET
      # ------------------------------------------------------------------

      - name: Deploy Docker Stack
        shell: bash
        env:
          APP_NAME: v2-${{ env.BRANCH_SLUG }}
          IMAGE_BACKEND: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:deploy-${{ env.BRANCH_SLUG }}
          HOST_URL:      ${{ env.BRANCH_SLUG }}.${{ secrets.APP_DOMAIN }}
          CI_DEBUG:      ${{ secrets.APP_DEBUG_MODE }}
          CI_ALLOWED_HOST: .${{ secrets.APP_DOMAIN }}
          CI_BUILD_TYPE: ${{ env.BUILD_TYPE }}
        run: |
          docker compose -f $STACK_YML config
          docker stack deploy -c $STACK_YML --with-registry-auth "$APP_NAME"