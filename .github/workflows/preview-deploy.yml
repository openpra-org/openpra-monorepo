name: Preview Deploy (Compose)

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]

concurrency:
  group: preview-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  deploy:
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    name: Deploy PR preview
    runs-on: self-hosted
    timeout-minutes: 30
    permissions:
      contents: read
      packages: read
      pull-requests: write
    env:
      PR_NUMBER: ${{ github.event.number }}
      COMPOSE_PROJECT_NAME: openpra-pr-${{ github.event.number }}
      # Base URL of the self-hosted runner; change to your runner's public host if not localhost
      PREVIEW_BASE_URL: http://localhost
      # Default ports (can be overridden via runner environment)
      FRONTEND_PORT: 4300
      BACKEND_PORT: 8300
      JOB_BROKER_PORT: 0
      MONGO_EXPRESS_PORT: 8181
      RABBITMQ_MGMT_PORT: 15672
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare image tags
        id: prep
        run: |
          OWNER_LOWER=$(echo "${GITHUB_REPOSITORY_OWNER}" | tr '[:upper:]' '[:lower:]')
          SHORT_SHA=${GITHUB_SHA::7}
          BRANCH_SLUG="${GITHUB_HEAD_REF:-${GITHUB_REF_NAME}}"
          BRANCH_SLUG=${BRANCH_SLUG//\//-}
          echo "OWNER_LOWER=$OWNER_LOWER" >> $GITHUB_ENV
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
          echo "BRANCH_SLUG=$BRANCH_SLUG" >> $GITHUB_ENV
          echo "FRONTEND_IMAGE_PRIMARY=ghcr.io/${OWNER_LOWER}/openpra-frontend:${SHORT_SHA}" >> $GITHUB_ENV
          echo "BACKEND_IMAGE_PRIMARY=ghcr.io/${OWNER_LOWER}/openpra-web-backend:${SHORT_SHA}" >> $GITHUB_ENV
          echo "JOB_BROKER_IMAGE_PRIMARY=ghcr.io/${OWNER_LOWER}/openpra-job-broker:${SHORT_SHA}" >> $GITHUB_ENV
          echo "FRONTEND_IMAGE_FALLBACK1=ghcr.io/${OWNER_LOWER}/openpra-frontend:${BRANCH_SLUG}" >> $GITHUB_ENV
          echo "BACKEND_IMAGE_FALLBACK1=ghcr.io/${OWNER_LOWER}/openpra-web-backend:${BRANCH_SLUG}" >> $GITHUB_ENV
          echo "JOB_BROKER_IMAGE_FALLBACK1=ghcr.io/${OWNER_LOWER}/openpra-job-broker:${BRANCH_SLUG}" >> $GITHUB_ENV
          echo "FRONTEND_IMAGE_FALLBACK2=ghcr.io/${OWNER_LOWER}/openpra-frontend:preview" >> $GITHUB_ENV
          echo "BACKEND_IMAGE_FALLBACK2=ghcr.io/${OWNER_LOWER}/openpra-web-backend:preview" >> $GITHUB_ENV
          echo "JOB_BROKER_IMAGE_FALLBACK2=ghcr.io/${OWNER_LOWER}/openpra-job-broker:preview" >> $GITHUB_ENV

      - name: Pull images
        run: |
          set -e
          pull_with_fallback() { primary=$1; fb1=$2; fb2=$3; name=$4; \
            echo "Pulling $name image $primary (fallbacks: $fb1, $fb2)"; \
            docker pull "$primary" || docker pull "$fb1" || docker pull "$fb2"; }
          pull_with_fallback "$FRONTEND_IMAGE_PRIMARY" "$FRONTEND_IMAGE_FALLBACK1" "$FRONTEND_IMAGE_FALLBACK2" frontend
          pull_with_fallback "$BACKEND_IMAGE_PRIMARY" "$BACKEND_IMAGE_FALLBACK1" "$BACKEND_IMAGE_FALLBACK2" backend
          pull_with_fallback "$JOB_BROKER_IMAGE_PRIMARY" "$JOB_BROKER_IMAGE_FALLBACK1" "$JOB_BROKER_IMAGE_FALLBACK2" job-broker
          # Export the chosen tags for compose (.env)
          FRONTEND_IMAGE=$(docker images --format '{{.Repository}}:{{.Tag}}' | grep 'ghcr.io/.*/openpra-frontend' | head -n1)
          BACKEND_IMAGE=$(docker images --format '{{.Repository}}:{{.Tag}}' | grep 'ghcr.io/.*/openpra-web-backend' | head -n1)
          JOB_BROKER_IMAGE=$(docker images --format '{{.Repository}}:{{.Tag}}' | grep 'ghcr.io/.*/openpra-job-broker' | head -n1)
          echo "FRONTEND_IMAGE=$FRONTEND_IMAGE" >> $GITHUB_ENV
          echo "BACKEND_IMAGE=$BACKEND_IMAGE" >> $GITHUB_ENV
          echo "JOB_BROKER_IMAGE=$JOB_BROKER_IMAGE" >> $GITHUB_ENV

      - name: Write .env file for compose
        run: |
          # Compute dynamic ports to reduce collisions
          PR_NUM=${PR_NUMBER}
          BASE=${PREVIEW_PORT_BASE:-0}
          FPORT=${FRONTEND_PORT:-$((BASE + 4300 + (PR_NUM % 400)))}
          BPORT=${BACKEND_PORT:-$((BASE + 8300 + (PR_NUM % 400)))}
          JPORT=${JOB_BROKER_PORT:-$((BASE + 9300 + (PR_NUM % 400)))}
          MPORT=${MONGO_EXPRESS_PORT:-$((BASE + 8100 + (PR_NUM % 400)))}
          RPORT=${RABBITMQ_MGMT_PORT:-$((BASE + 5600 + (PR_NUM % 400)))}
          echo "FRONTEND_PORT=$FPORT" >> $GITHUB_ENV
          echo "BACKEND_PORT=$BPORT" >> $GITHUB_ENV
          echo "JOB_BROKER_PORT=$JPORT" >> $GITHUB_ENV
          echo "MONGO_EXPRESS_PORT=$MPORT" >> $GITHUB_ENV
          echo "RABBITMQ_MGMT_PORT=$RPORT" >> $GITHUB_ENV
          cat > .env << EOF
          COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME}
          FRONTEND_IMAGE=${FRONTEND_IMAGE}
          BACKEND_IMAGE=${BACKEND_IMAGE}
          JOB_BROKER_IMAGE=${JOB_BROKER_IMAGE}
          FRONTEND_PORT=${FPORT}
          BACKEND_PORT=${BPORT}
          JOB_BROKER_PORT=${JPORT}
          MONGO_EXPRESS_PORT=${MPORT}
          RABBITMQ_MGMT_PORT=${RPORT}
          EOF

      - name: Start preview stack
        run: |
          docker compose -f docker/docker-compose.preview.yml --env-file .env -p "${COMPOSE_PROJECT_NAME}" up -d

      - name: Wait for services to be healthy
        run: |
          set -e
          # simple retries for backend and frontend
          for i in $(seq 1 60); do
            if curl -fsS "http://localhost:${BACKEND_PORT}/api" >/dev/null 2>&1; then echo "Backend up"; break; fi; sleep 2; done
          for i in $(seq 1 60); do
            if curl -fsS "http://localhost:${FRONTEND_PORT}/" >/dev/null 2>&1; then echo "Frontend up"; break; fi; sleep 2; done

      - name: Collect compose logs (snapshot)
        run: |
          set -e
          # Capture a concise snapshot of compose logs for debugging
          docker compose -f docker/docker-compose.preview.yml --env-file .env -p "${COMPOSE_PROJECT_NAME}" logs --no-color > compose-logs.full.txt || true
          # Trim to last 2000 lines to keep artifact small
          tail -n 2000 compose-logs.full.txt > compose-logs.txt || true

      - name: Upload preview logs artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: preview-logs
          path: |
            compose-logs.txt

      - name: Comment preview URLs on PR (sticky)
        uses: actions/github-script@v7
        with:
          script: |
            const header = 'preview-deploy';
            const marker = `<!-- ${header} -->`;
            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;
            const base = process.env.PREVIEW_BASE_URL || 'http://localhost';
            const f = process.env.FRONTEND_PORT;
            const b = process.env.BACKEND_PORT;
            const r = process.env.RABBITMQ_MGMT_PORT;
            const m = process.env.MONGO_EXPRESS_PORT;
            const imgF = process.env.FRONTEND_IMAGE;
            const imgB = process.env.BACKEND_IMAGE;
            const imgJ = process.env.JOB_BROKER_IMAGE;
            const runUrl = `${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`;
            const body = `${marker}\n` +
              `Preview is live for PR #${issue_number}\n\n` +
              `- Frontend: ${base}:${f}/\n` +
              `- Backend API: ${base}:${b}/api\n` +
              `- RabbitMQ (mgmt): ${base}:${r}/\n` +
              `- Mongo Express: ${base}:${m}/\n\n` +
              `Images:\n` +
              `- Frontend image: ${imgF}\n` +
              `- Backend image: ${imgB}\n` +
              `- Job broker image: ${imgJ}\n\n` +
              `Logs: ${runUrl} (Artifacts: preview-logs)\n`;
            const comments = await github.paginate(github.rest.issues.listComments, { owner, repo, issue_number, per_page: 100 });
            const existing = comments.find(c => (c.user?.type !== 'Bot' ? true : true) && typeof c.body === 'string' && c.body.startsWith(marker));
            if (existing) {
              await github.rest.issues.updateComment({ owner, repo, comment_id: existing.id, body });
              core.info(`Updated sticky preview comment (id: ${existing.id}).`);
            } else {
              const res = await github.rest.issues.createComment({ owner, repo, issue_number, body });
              core.info(`Created sticky preview comment (id: ${res.data.id}).`);
            }

  teardown:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    name: Teardown PR preview
    runs-on: self-hosted
    timeout-minutes: 15
    permissions:
      pull-requests: write
    env:
      COMPOSE_PROJECT_NAME: openpra-pr-${{ github.event.number }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Recreate .env for compose (defaults)
        run: |
          cat > .env << EOF
          COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME}
          FRONTEND_PORT=${FRONTEND_PORT:-4300}
          BACKEND_PORT=${BACKEND_PORT:-8300}
          JOB_BROKER_PORT=${JOB_BROKER_PORT:-0}
          MONGO_EXPRESS_PORT=${MONGO_EXPRESS_PORT:-8181}
          RABBITMQ_MGMT_PORT=${RABBITMQ_MGMT_PORT:-15672}
          EOF

      - name: Stop and remove preview stack
        run: |
          set -e
          docker compose -f docker/docker-compose.preview.yml --env-file .env -p "${COMPOSE_PROJECT_NAME}" down -v || true

      - name: Remove sticky comment
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const header = 'preview-deploy';
            const marker = `<!-- ${header} -->`;
            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;
            const comments = await github.paginate(github.rest.issues.listComments, { owner, repo, issue_number, per_page: 100 });
            const existing = comments.find(c => typeof c.body === 'string' && c.body.startsWith(marker));
            if (existing) {
              await github.rest.issues.deleteComment({ owner, repo, comment_id: existing.id });
              core.info(`Deleted sticky preview comment (id: ${existing.id}).`);
            } else {
              core.info('No sticky preview comment found to delete.');
            }
