name: Nx Release

on:
  workflow_dispatch:
    inputs:
      dryRun:
        description: "Run release in dry-run mode"
        required: false
        default: "true"
  push:
    branches:
      - main
      - docs/unified-pages-tsdoc-doxygen

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Ensure pnpm available
        run: npx -y pnpm@10.19.0 --version

      - name: Install dependencies (skip lifecycle scripts)
        run: npx -y pnpm@10.19.0 install --frozen-lockfile --ignore-scripts

      - name: Install system dependencies for native build
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            make \
            cmake \
            g++ \
            git \
            python3 \
            curl \
            ca-certificates \
            libxml2-dev \
            libomp-dev \
            libgoogle-perftools-dev \
            libboost-program-options-dev \
            libboost-math-dev \
            libboost-random-dev \
            libboost-filesystem-dev \
            libboost-test-dev \
            libboost-date-time-dev \
            libjemalloc-dev \
            libxml2 \
            libboost-filesystem1.74.0 \
            libboost-program-options1.74.0 \
            libtcmalloc-minimal4 \
            libjemalloc2

      - name: Build scram-node native addon
        run: |
          cd packages/engine/scram-node
          npx -y pnpm@10.19.0 run install

      - name: Install scram CLI (optional)
        run: |
          if [ -f packages/engine/scram-node/build/cmake_install.cmake ]; then
            cmake --install packages/engine/scram-node/build
          else
            echo "No CMake install script found; skipping scram-cli install"
          fi

      - name: Build
        run: npx -y pnpm@10.19.0 nx run-many -t build

      - name: Test
        env:
          CI: "true"
          # MONGO_URI should be provided by repo/env secrets or self-hosted action
          MONGO_URI: ${{ secrets.MONGO_URI }}
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          export LD_LIBRARY_PATH="$HOME/.local/lib/scram:${LD_LIBRARY_PATH:-}"
          npx -y pnpm@10.19.0 nx run-many -t test -- --test-timeout=60000

      - name: Nx Release Version (Conventional Commits)
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.dryRun == 'true' }}
        run: npx -y pnpm@10.19.0 nx release version --dry-run

      - name: Nx Release Version (apply)
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.dryRun != 'true' }}
        run: npx -y pnpm@10.19.0 nx release version

      - name: Nx Release Changelog
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.dryRun != 'true' }}
        run: npx -y pnpm@10.19.0 nx release changelog

      - name: Nx Release Publish (npm)
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.dryRun != 'true' }}
        env:
          NPM_CONFIG_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npx -y pnpm@10.19.0 nx release publish

      - name: Create GitHub Release
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.dryRun != 'true' }}
        run: npx -y pnpm@10.19.0 nx release github
