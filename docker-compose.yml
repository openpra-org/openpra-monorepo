volumes:
  mongo_data:
  rabbitmq_data:
  minio_data:

networks:
  db_net:
  svc_net:
  rmq_net:

configs:
  rabbitmq_plugins:
    file: docker/configs/rabbitmq/enabled_plugins
  rabbitmq_conf:
    file: docker/configs/rabbitmq/rabbitmq.conf
  nestjs_env_vars:
    file: docker/configs/.docker-compose.env

secrets:
  JWT_SECRET:
    file: ./.jwt-open-secret

x-base-image: &base-image
  build:
     context: .
     dockerfile: docker/Dockerfile
  restart: unless-stopped
  env_file:
    - docker/configs/.docker-compose.env
  configs:
    - source: nestjs_env_vars
      target: /data/project/.env

x-base-healthcheck: &healthcheck-fragments
  interval: 10s
  timeout: 2s
  retries: 5
  start_period: 150s
  start_interval: 2s

services:
  frontend:
    <<: *base-image
    ports:
      - "4200:4200"
    networks:
      - svc_net
    command: "nx run --verbose frontend-web-editor:serve:development"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4200/"]
      <<: *healthcheck-fragments

  job-broker:
    <<: *base-image
    ports:
      - "3000:3000"
    command: "nx run --verbose microservice-job-broker:serve:development"
    networks:
      - db_net
      - rmq_net
      - svc_net
    depends_on:
      mongodb:
        condition: service_started
      rabbitmq:
        condition: service_started
      minio:
        condition: service_healthy
    environment:
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/q/job-types"]
      <<: *healthcheck-fragments

  job-worker:
    <<: *base-image
    command: "nx run --verbose microservice-job-broker:serve-consumer:development"
    networks:
      - db_net
      - rmq_net
      - svc_net
    depends_on:
      mongodb:
        condition: service_started
      rabbitmq:
        condition: service_started
      minio:
        condition: service_healthy
    environment:
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
    deploy:
      replicas: 4

  backend:
    <<: *base-image
    ports:
      - "8000:8000"
    command: "nx run --verbose web-backend:serve:development"
    depends_on:
      mongodb:
        condition: service_started
      minio:
        condition: service_healthy
    networks:
      - db_net
      - svc_net
    secrets:
      - JWT_SECRET
    environment:
      JWT_SECRET_KEY_FILE: /run/secrets/JWT_SECRET
      # Ensure in-cluster services talk to MinIO via service name rather than localhost
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api"]
      <<: *healthcheck-fragments

  rabbitmq:
    image: rabbitmq:management-alpine
    restart: unless-stopped
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - rmq_net
    ports:
      - "5672:5672"
      - "15672:15672"
    configs:
      - source: rabbitmq_plugins
        target: /etc/rabbitmq/enabled_plugins
      - source: rabbitmq_conf
        target: /etc/rabbitmq/rabbitmq.conf

  mongodb:
    image: mongo:latest
    restart: unless-stopped
    ports:
      - "27017:27017"
    networks:
      - db_net
    volumes:
      - mongo_data:/data/db

  minio:
    image: quay.io/minio/minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - svc_net
      - db_net
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/ready"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s