#!/usr/bin/env node
/**
 * Check documentation coverage thresholds.
 * - Reads packages/docs-md/api/ts/coverage.json (generated by typedoc-coverage.mjs)
 * - Reads packages/docs-md/tools/coverage-thresholds.json
 * - Fails (exit 1) if any enforced threshold is not met
 */
import { readFileSync } from 'fs';
import { join } from 'path';

const ROOT = process.cwd();
const COVERAGE_JSON = join(ROOT, 'packages/docs-md/api/ts/coverage.json');
const THRESHOLDS_JSON = join(ROOT, 'packages/docs-md/tools/coverage-thresholds.json');

function loadJson(path) {
  try {
    return JSON.parse(readFileSync(path, 'utf8'));
  } catch (e) {
    console.error(`[coverage:check] Failed to read ${path}:`, e?.message || e);
    process.exit(2);
  }
}

function pct(v) {
  return typeof v === 'number' && isFinite(v) ? v : 0;
}

function main() {
  const coverage = loadJson(COVERAGE_JSON);
  const thresholds = loadJson(THRESHOLDS_JSON);
  const global = thresholds.global || {};
  const perTs = thresholds.ts || {};

  const rows = (coverage?.ts?.rows ?? []).filter((r) => !r.fallback);
  const failures = [];

  for (const r of rows) {
    const pkgName = r.package;
    const rule = perTs[pkgName] || {};
    if (rule.exclude) continue;

    const wantSymbols = rule.symbolDocPct ?? global.symbolDocPct;
    const wantParams = rule.paramsPct ?? global.paramsPct;
    const wantReturns = rule.returnsPct ?? global.returnsPct;

    const gotSymbols = pct(r.symbolsPercent);
    const gotParams = pct(r.paramsPercent);
    const gotReturns = pct(r.returnsPercent);

    if (typeof wantSymbols === 'number' && gotSymbols < wantSymbols) {
      failures.push({ pkg: pkgName, metric: 'doc%', want: wantSymbols, got: gotSymbols });
    }
    if (typeof wantParams === 'number' && gotParams < wantParams) {
      failures.push({ pkg: pkgName, metric: 'params%', want: wantParams, got: gotParams });
    }
    if (typeof wantReturns === 'number' && gotReturns < wantReturns) {
      failures.push({ pkg: pkgName, metric: 'returns%', want: wantReturns, got: gotReturns });
    }
  }

  if (failures.length === 0) {
    console.log('[coverage:check] PASS \u2713 All thresholds met');
    for (const r of rows) {
      console.log(` - ${r.package}: doc ${r.symbolsPercent}% | params ${r.paramsPercent}% | returns ${r.returnsPercent}%`);
    }
    process.exit(0);
  } else {
    console.error('[coverage:check] FAIL \u2717 Thresholds not met:');
    for (const f of failures) {
      console.error(` - ${f.pkg}: ${f.metric} ${f.got}% < required ${f.want}%`);
    }
    console.error('\nHint: adjust per-package thresholds in tools/coverage-thresholds.json or add docs to improve coverage.');
    process.exit(1);
  }
}

main();
