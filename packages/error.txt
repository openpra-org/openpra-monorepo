ERROR in ./packages/frontend/web-editor/src/app/components/lists/nestedLists/FaultTreeListZustand.tsx:34:9
TS2353: Object literal may only specify known properties, and 'postNestedEndpoint' does not exist in type 'CreateGenericListOptions<FaultTree>'.
    32 |         getItemName: (item) => item.name,
    33 |         getItemDescription: (item) => item.description || "",
  > 34 |         postNestedEndpoint: addFaultTree,
       |         ^^^^^^^^^^^^^^^^^^
    35 |         patchNestedEndpoint: editFaultTree,
    36 |         deleteNestedEndpoint: deleteFaultTree,
    37 |       }),

ERROR in ./packages/frontend/web-editor/src/app/components/lists/nestedLists/functionalEventsList.tsx:13:7
TS2322: Type '(id: number, data: LabelJSON) => Promise<NestedModel>' is not assignable to type '(id: string, data: LabelJSON) => {}'.
  Types of parameters 'id' and 'id' are incompatible.
    Type 'string' is not assignable to type 'number'.
    11 |       getNestedEndpoint={GetFunctionalEvents}
    12 |       deleteNestedEndpoint={DeleteFunctionalEvent}
  > 13 |       patchNestedEndpoint={PatchFunctionalEventLabel}
       |       ^^^^^^^^^^^^^^^^^^^
    14 |       name="functional-event"
    15 |     />
    16 |   );

ERROR in ./packages/frontend/web-editor/src/app/components/lists/nestedLists/heatBalanceFaultTreeList.tsx:13:7
TS2322: Type '(id: number, data: LabelJSON) => Promise<NestedModel>' is not assignable to type '(id: string, data: LabelJSON) => {}'.
  Types of parameters 'id' and 'id' are incompatible.
    Type 'string' is not assignable to type 'number'.
    11 |       getNestedEndpoint={GetHeatBalanceFaultTrees}
    12 |       deleteNestedEndpoint={DeleteHeatBalanceFaultTree}
  > 13 |       patchNestedEndpoint={PatchHeatBalanceFaultTreeLabel}
       |       ^^^^^^^^^^^^^^^^^^^
    14 |       name="heat-balance-fault-tree"
    15 |     />
    16 |   );

ERROR in ./packages/frontend/web-editor/src/app/components/lists/nestedLists/humanReliabilityAnalysisList.tsx:13:7
TS2322: Type '(id: number, data: LabelJSON) => Promise<NestedModel>' is not assignable to type '(id: string, data: LabelJSON) => {}'.
  Types of parameters 'id' and 'id' are incompatible.
    Type 'string' is not assignable to type 'number'.
    11 |       getNestedEndpoint={GetHumanReliabilityAnalysis}
    12 |       deleteNestedEndpoint={DeleteHumanReliabilityAnalysis}
  > 13 |       patchNestedEndpoint={PatchHumanReliabilityLabel}
       |       ^^^^^^^^^^^^^^^^^^^
    14 |       name="human-reliability-analysis"
    15 |     />
    16 |   );

ERROR in ./packages/frontend/web-editor/src/app/components/lists/nestedLists/markovChainsList.tsx:13:7
TS2322: Type '(id: number, data: LabelJSON) => Promise<NestedModel>' is not assignable to type '(id: string, data: LabelJSON) => {}'.
  Types of parameters 'id' and 'id' are incompatible.
    Type 'string' is not assignable to type 'number'.
    11 |       getNestedEndpoint={GetMarkovChains}
    12 |       deleteNestedEndpoint={DeleteMarkovChain}
  > 13 |       patchNestedEndpoint={PatchMarkovChainLabel}
       |       ^^^^^^^^^^^^^^^^^^^
    14 |       name="markov-chain"
    15 |     />
    16 |   );

ERROR in ./packages/frontend/web-editor/src/app/components/lists/nestedLists/mechanisticSourceTermList.tsx:13:7
TS2322: Type '(id: number, data: LabelJSON) => Promise<NestedModel>' is not assignable to type '(id: string, data: LabelJSON) => {}'.
  Types of parameters 'id' and 'id' are incompatible.
    Type 'string' is not assignable to type 'number'.
    11 |       getNestedEndpoint={GetMechanisticSourceTerm}
    12 |       deleteNestedEndpoint={DeleteMechanisticSourceTerm}
  > 13 |       patchNestedEndpoint={PatchMechanisticSourceTermLabel}
       |       ^^^^^^^^^^^^^^^^^^^
    14 |       name="mechanistic-source-term"
    15 |     />
    16 |   );

ERROR in ./packages/frontend/web-editor/src/app/components/lists/nestedLists/operatingStateAnalysisList.tsx:13:7
TS2322: Type '(id: number, data: LabelJSON) => Promise<NestedModel>' is not assignable to type '(id: string, data: LabelJSON) => {}'.
  Types of parameters 'id' and 'id' are incompatible.
    Type 'string' is not assignable to type 'number'.
    11 |       getNestedEndpoint={GetOperatingStateAnalysis}
    12 |       deleteNestedEndpoint={DeleteOperatingStateAnalysis}
  > 13 |       patchNestedEndpoint={PatchOperatingStateLabel}
       |       ^^^^^^^^^^^^^^^^^^^
    14 |       name="operating-state-analysis"
    15 |     />
    16 |   );

ERROR in ./packages/frontend/web-editor/src/app/components/lists/nestedLists/radiologicalConsequenceAnalysisList.tsx:13:7
TS2322: Type '(id: number, data: LabelJSON) => Promise<NestedModel>' is not assignable to type '(id: string, data: LabelJSON) => {}'.
  Types of parameters 'id' and 'id' are incompatible.
    Type 'string' is not assignable to type 'number'.
    11 |       getNestedEndpoint={GetRadiologicalConsequenceAnalysis}
    12 |       deleteNestedEndpoint={DeleteRadiologicalConsequenceAnalysis}
  > 13 |       patchNestedEndpoint={PatchRadiologicalConsequenceLabel}
       |       ^^^^^^^^^^^^^^^^^^^
    14 |       name="radiological-consequence-analysis"
    15 |     />
    16 |   );

ERROR in ./packages/frontend/web-editor/src/app/components/lists/nestedLists/riskIntegrationList.tsx:13:7
TS2322: Type '(id: number, data: LabelJSON) => Promise<NestedModel>' is not assignable to type '(id: string, data: LabelJSON) => {}'.
  Types of parameters 'id' and 'id' are incompatible.
    Type 'string' is not assignable to type 'number'.
    11 |       getNestedEndpoint={GetRiskIntegration}
    12 |       deleteNestedEndpoint={DeleteRiskIntegration}
  > 13 |       patchNestedEndpoint={PatchRiskIntegrationLabel}
       |       ^^^^^^^^^^^^^^^^^^^
    14 |       name="risk-integration"
    15 |     />
    16 |   );

ERROR in ./packages/frontend/web-editor/src/app/components/lists/nestedLists/successCriteriaList.tsx:13:7
TS2322: Type '(id: number, data: LabelJSON) => Promise<NestedModel>' is not assignable to type '(id: string, data: LabelJSON) => {}'.
  Types of parameters 'id' and 'id' are incompatible.
    Type 'string' is not assignable to type 'number'.
    11 |       getNestedEndpoint={GetSuccessCriteria}
    12 |       deleteNestedEndpoint={DeleteSuccessCriteria}
  > 13 |       patchNestedEndpoint={PatchSuccessCriteriaLabel}
       |       ^^^^^^^^^^^^^^^^^^^
    14 |       name="success-criteria"
    15 |     />
    16 |   );

ERROR in ./packages/frontend/web-editor/src/app/components/lists/nestedLists/systemsAnalysisList.tsx:13:7
TS2322: Type '(id: number, data: LabelJSON) => Promise<NestedModel>' is not assignable to type '(id: string, data: LabelJSON) => {}'.
  Types of parameters 'id' and 'id' are incompatible.
    Type 'string' is not assignable to type 'number'.
    11 |       getNestedEndpoint={GetSystemsAnalysis}
    12 |       deleteNestedEndpoint={DeleteSystemsAnalysis}
  > 13 |       patchNestedEndpoint={PatchSystemsAnalysisLabel}
       |       ^^^^^^^^^^^^^^^^^^^
    14 |       name="systems-analysis"
    15 |     />
    16 |   );

ERROR in ./packages/frontend/web-editor/src/app/components/lists/nestedLists/templateList/nestedModelList.tsx:63:9
TS2322: Type 'number' is not assignable to type 'string'.
    61 |       <GenericListItem
    62 |         itemName={modelItem.getLabel().getName()}
  > 63 |         id={modelItem.getId()}
       |         ^^
    64 |         key={modelItem.getId()} // Use a unique key for each item (e.g., the ID)
    65 |         label={{
    66 |           name: modelItem.getLabel().getName(),

ERROR in ./packages/frontend/web-editor/src/app/components/lists/nestedLists/templateList/nestedModelList.tsx:90:11
TS2345: Argument of type '(id: string) => {}' is not assignable to parameter of type '(id: number) => {}'.
  Types of parameters 'id' and 'id' are incompatible.
    Type 'number' is not assignable to type 'string'.
    88 |       try {
    89 |         const items = await getFixtures(
  > 90 |           deleteNestedEndpoint,
       |           ^^^^^^^^^^^^^^^^^^^^
    91 |           patchNestedEndpoint,
    92 |           name,
    93 |           getNestedEndpoint,

ERROR in ./packages/frontend/web-editor/src/app/components/lists/nestedLists/templateList/nestedModelListZustand.tsx:37:9
TS2353: Object literal may only specify known properties, and 'postNestedEndpoint' does not exist in type 'CreateGenericListOptions<NestedModelType>'.
    35 |         modelList: NestedModelList,
    36 |         endpoint: name,
  > 37 |         postNestedEndpoint: AddNestedModel,
       |         ^^^^^^^^^^^^^^^^^^
    38 |         patchNestedEndpoint: EditNestedModel,
    39 |         deleteNestedEndpoint: DeleteNestedModel,
    40 |       }),

ERROR in ./packages/frontend/web-editor/src/app/components/lists/nestedLists/weibullAnalysisList.tsx:13:7
TS2322: Type '(id: number, data: LabelJSON) => Promise<NestedModel>' is not assignable to type '(id: string, data: LabelJSON) => {}'.
  Types of parameters 'id' and 'id' are incompatible.
    Type 'string' is not assignable to type 'number'.
    11 |       getNestedEndpoint={GetWeibullAnalysis}
    12 |       deleteNestedEndpoint={DeleteWeibullAnalysis}
  > 13 |       patchNestedEndpoint={PatchWeibullAnalysisLabel}
       |       ^^^^^^^^^^^^^^^^^^^
    14 |       name="weibull-analysis"
    15 |     />
    16 |   );

ERROR in ./packages/frontend/web-editor/src/app/components/lists/workspaceLists/externalHazardsList.tsx:30:9
TS2353: Object literal may only specify known properties, and 'postTypedEndpoint' does not exist in type 'CreateGenericListOptions<typedModelType>'.
    28 |         modelList: externalHazardsList,
    29 |         endpoint: "External Hazards",
  > 30 |         postTypedEndpoint: createExternalHazards,
       |         ^^^^^^^^^^^^^^^^^
    31 |         patchTypedEndpoint: editExternalHazard,
    32 |         deleteTypedEndpoint: deleteExternalHazard,
    33 |       }),

ERROR in ./packages/frontend/web-editor/src/app/components/lists/workspaceLists/fullScopeList.tsx:30:9
TS2353: Object literal may only specify known properties, and 'postTypedEndpoint' does not exist in type 'CreateGenericListOptions<typedModelType>'.
    28 |         modelList: fullScopeList,
    29 |         endpoint: "Full Scope",
  > 30 |         postTypedEndpoint: createFullScope,
       |         ^^^^^^^^^^^^^^^^^
    31 |         patchTypedEndpoint: editFullScope,
    32 |         deleteTypedEndpoint: deleteFullScope,
    33 |       }),

ERROR in ./packages/frontend/web-editor/src/app/components/lists/workspaceLists/internalEventsList.tsx:30:9
TS2353: Object literal may only specify known properties, and 'postTypedEndpoint' does not exist in type 'CreateGenericListOptions<typedModelType>'.
    28 |         modelList: internalEventsList,
    29 |         endpoint: "Internal Events",
  > 30 |         postTypedEndpoint: createInternalEvents,
       |         ^^^^^^^^^^^^^^^^^
    31 |         patchTypedEndpoint: editInternalEvent,
    32 |         deleteTypedEndpoint: deleteInternalEvent,
    33 |       }),

ERROR in ./packages/frontend/web-editor/src/app/components/lists/workspaceLists/internalHazardsList.tsx:30:9
TS2353: Object literal may only specify known properties, and 'postTypedEndpoint' does not exist in type 'CreateGenericListOptions<typedModelType>'.
    28 |         modelList: internalHazardsList,
    29 |         endpoint: "Internal Hazards",
  > 30 |         postTypedEndpoint: createInternalHazards,
       |         ^^^^^^^^^^^^^^^^^
    31 |         patchTypedEndpoint: editInternalHazard,
    32 |         deleteTypedEndpoint: deleteInternalHazard,
    33 |       }),

ERROR in ./packages/frontend/web-editor/src/app/hooks/eventTree/useEventTreeContextMenuClick.ts:205:23
TS2339: Property 'storeFaultTree' does not exist on type 'typeof GraphApiManager'.
    203 |       setEdges(edges);
    204 |
  > 205 |       GraphApiManager.storeFaultTree(
        |                       ^^^^^^^^^^^^^^
    206 |         FaultTreeState({
    207 |           faultTreeId: faultTreeId!,
    208 |           nodes: nodes,

ERROR in ./packages/frontend/web-editor/src/app/hooks/faultTree/useEdgeClick.ts:107:26
TS2339: Property 'storeFaultTree' does not exist on type 'typeof GraphApiManager'.
    105 |
    106 |     // fitView({ nodes: [{ id: insertNode.id }], duration: 500, maxZoom: 1.6 });
  > 107 |     void GraphApiManager.storeFaultTree(
        |                          ^^^^^^^^^^^^^^
    108 |       FaultTreeState({
    109 |         faultTreeId: faultTreeId ?? "",
    110 |         nodes: newNodes,

ERROR in ./packages/frontend/web-editor/src/app/hooks/faultTree/useFaultTreeContextMenuClick.ts:227:29
TS2339: Property 'storeFaultTree' does not exist on type 'typeof GraphApiManager'.
    225 |         });
    226 |       }
  > 227 |       await GraphApiManager.storeFaultTree(
        |                             ^^^^^^^^^^^^^^
    228 |         FaultTreeState({
    229 |           nodes: nodes,
    230 |           edges: edges,

ERROR in ./packages/frontend/web-editor/src/app/hooks/faultTree/useGrayedNodeClick.ts:69:29
TS2339: Property 'storeFaultTree' does not exist on type 'typeof GraphApiManager'.
    67 |       setEdges(finalEdges);
    68 |
  > 69 |       await GraphApiManager.storeFaultTree(
       |                             ^^^^^^^^^^^^^^
    70 |         FaultTreeState({
    71 |           nodes: finalNodes,
    72 |           edges: finalEdges,

ERROR in ./packages/frontend/web-editor/src/app/hooks/faultTree/useNodeDoubleClick.ts:78:27
TS2339: Property 'storeFaultTree' does not exist on type 'typeof GraphApiManager'.
    76 |     setFocusNodeId(parentNode.id);
    77 |
  > 78 |     await GraphApiManager.storeFaultTree(
       |                           ^^^^^^^^^^^^^^
    79 |       FaultTreeState({
    80 |         nodes: newNodes,
    81 |         edges: newEdges,

ERROR in ./packages/frontend/web-editor/src/app/pages/fullScopePages/eventTrees.tsx:98:42
TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
  Type 'undefined' is not assignable to type 'string'.
     96 |   useEffect(() => {
     97 |     const loadGraph = async (): Promise<void> => {
  >  98 |       await GraphApiManager.getEventTree(eventTreeId).then((res: EventTreeGraph) => {
        |                                          ^^^^^^^^^^^
     99 |         setNodes(res.nodes.length !== 0 ? res.nodes : nodeData);
    100 |         setEdges(res.edges.length !== 0 ? res.edges : edgeData);
    101 |         setLoading(false);

ERROR in ./packages/frontend/web-editor/src/app/zustand/ExternalHazards/ExternalHazardsActions.tsx:15:7
TS2345: Argument of type 'number | undefined' is not assignable to parameter of type 'string'.
  Type 'undefined' is not assignable to type 'string'.
    13 |   try {
    14 |     const externalHazardsList: ExternalHazardsModelType[] = await GetExternalHazards(
  > 15 |       ApiManager.getCurrentUser().user_id,
       |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    16 |     );
    17 |     UseGlobalStore.setState({
    18 |       ExternalHazards: externalHazardsList,

ERROR in ./packages/frontend/web-editor/src/app/zustand/ExternalHazards/ExternalHazardsActions.tsx:41:13
TS2367: This comparison appears to be unintentional because the types 'string' and 'number' have no overlap.
    39 |     UseGlobalStore.setState((state) => ({
    40 |       ExternalHazards: state.ExternalHazards.map((eh: ExternalHazardsModelType) => {
  > 41 |         if (eh.id === modelId) {
       |             ^^^^^^^^^^^^^^^^^
    42 |           return ehr;
    43 |         } else {
    44 |           return eh;

ERROR in ./packages/frontend/web-editor/src/app/zustand/ExternalHazards/ExternalHazardsActions.tsx:53:35
TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.
    51 | export const DeleteExternalHazard = async (id: number): Promise<void> => {
    52 |   try {
  > 53 |     await DeleteExternalHazardAPI(id);
       |                                   ^^
    54 |
    55 |     UseGlobalStore.setState((state) => ({
    56 |       ExternalHazards: state.ExternalHazards.filter((eh: ExternalHazardsModelType) => eh.id !== id),

ERROR in ./packages/frontend/web-editor/src/app/zustand/ExternalHazards/ExternalHazardsActions.tsx:56:87
TS2367: This comparison appears to be unintentional because the types 'string' and 'number' have no overlap.
    54 |
    55 |     UseGlobalStore.setState((state) => ({
  > 56 |       ExternalHazards: state.ExternalHazards.filter((eh: ExternalHazardsModelType) => eh.id !== id),
       |                                                                                       ^^^^^^^^^^^^
    57 |     }));
    58 |   } catch (error) {}
    59 | };

ERROR in ./packages/frontend/web-editor/src/app/zustand/FullScope/FullScopeActions.tsx:14:74
TS2345: Argument of type 'number | undefined' is not assignable to parameter of type 'string'.
  Type 'undefined' is not assignable to type 'string'.
    12 | export const SetFullScope = async (): Promise<void> => {
    13 |   try {
  > 14 |     const fullScopeList: FullScopeModelType[] = await GetFullScopeModels(ApiManager.getCurrentUser().user_id);
       |                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    15 |     UseGlobalStore.setState({
    16 |       FullScope: fullScopeList,
    17 |     });

ERROR in ./packages/frontend/web-editor/src/app/zustand/FullScope/FullScopeActions.tsx:35:13
TS2367: This comparison appears to be unintentional because the types 'string' and 'number' have no overlap.
    33 |     UseGlobalStore.setState((state) => ({
    34 |       FullScope: state.FullScope.map((fs: FullScopeModelType) => {
  > 35 |         if (fs.id === modelId) {
       |             ^^^^^^^^^^^^^^^^^
    36 |           return fsr;
    37 |         } else {
    38 |           return fs;

ERROR in ./packages/frontend/web-editor/src/app/zustand/FullScope/FullScopeActions.tsx:47:30
TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.
    45 | export const DeleteFullScope = async (id: number): Promise<void> => {
    46 |   try {
  > 47 |     await DeleteFullScopeAPI(id);
       |                              ^^
    48 |
    49 |     UseGlobalStore.setState((state) => ({
    50 |       FullScope: state.FullScope.filter((fs: FullScopeModelType) => fs.id !== id),

ERROR in ./packages/frontend/web-editor/src/app/zustand/FullScope/FullScopeActions.tsx:50:69
TS2367: This comparison appears to be unintentional because the types 'string' and 'number' have no overlap.
    48 |
    49 |     UseGlobalStore.setState((state) => ({
  > 50 |       FullScope: state.FullScope.filter((fs: FullScopeModelType) => fs.id !== id),
       |                                                                     ^^^^^^^^^^^^
    51 |     }));
    52 |   } catch (error) {}
    53 | };

ERROR in ./packages/frontend/web-editor/src/app/zustand/InternalEvents/InternalEventsActions.tsx:14:83
TS2345: Argument of type 'number | undefined' is not assignable to parameter of type 'string'.
  Type 'undefined' is not assignable to type 'string'.
    12 | export const SetInternalEvents = async (): Promise<void> => {
    13 |   try {
  > 14 |     const internalEventsList: InternalEventsModelType[] = await GetInternalEvents(ApiManager.getCurrentUser().user_id);
       |                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    15 |     UseGlobalStore.setState({
    16 |       InternalEvents: internalEventsList,
    17 |     });

ERROR in ./packages/frontend/web-editor/src/app/zustand/InternalEvents/InternalEventsActions.tsx:39:13
TS2367: This comparison appears to be unintentional because the types 'string' and 'number' have no overlap.
    37 |     UseGlobalStore.setState((state) => ({
    38 |       InternalEvents: state.InternalEvents.map((ie: InternalEventsModelType) => {
  > 39 |         if (ie.id === modelId) {
       |             ^^^^^^^^^^^^^^^^^
    40 |           return ier;
    41 |         } else {
    42 |           return ie;

ERROR in ./packages/frontend/web-editor/src/app/zustand/InternalEvents/InternalEventsActions.tsx:51:34
TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.
    49 | export const DeleteInternalEvent = async (id: number): Promise<void> => {
    50 |   try {
  > 51 |     await DeleteInternalEventAPI(id);
       |                                  ^^
    52 |
    53 |     UseGlobalStore.setState((state) => ({
    54 |       InternalEvents: state.InternalEvents.filter((ie: InternalEventsModelType) => ie.id !== id),

ERROR in ./packages/frontend/web-editor/src/app/zustand/InternalEvents/InternalEventsActions.tsx:54:84
TS2367: This comparison appears to be unintentional because the types 'string' and 'number' have no overlap.
    52 |
    53 |     UseGlobalStore.setState((state) => ({
  > 54 |       InternalEvents: state.InternalEvents.filter((ie: InternalEventsModelType) => ie.id !== id),
       |                                                                                    ^^^^^^^^^^^^
    55 |     }));
    56 |   } catch (error) {}
    57 | };

ERROR in ./packages/frontend/web-editor/src/app/zustand/InternalHazards/InternalHazardsActions.tsx:15:7
TS2345: Argument of type 'number | undefined' is not assignable to parameter of type 'string'.
  Type 'undefined' is not assignable to type 'string'.
    13 |   try {
    14 |     const internalHazardsList: InternalHazardsModelType[] = await GetInternalHazards(
  > 15 |       ApiManager.getCurrentUser().user_id,
       |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    16 |     );
    17 |     UseGlobalStore.setState({
    18 |       InternalHazards: internalHazardsList,

ERROR in ./packages/frontend/web-editor/src/app/zustand/InternalHazards/InternalHazardsSlice.tsx:12:7
TS2322: Type '(set: (partial: (InternalEventsType & InternalHazardsType & ExternalHazardsType & FullScopeType & ... 12 more ... & { ...; }) | Partial<...> | ((state: InternalEventsType & ... 15 more ... & { ...; }) => (InternalEventsType & ... 15 more ... & { ...; }) | Partial<...>), replace?: boolean | undefined) => void) => { ....' is not assignable to type 'StateCreator<InternalEventsType & InternalHazardsType & ExternalHazardsType & FullScopeType & NestedModelsType & ... 11 more ... & { ...; }, [], [], InternalHazardsType & InternalHazardsActionsType>'.
  Type '(set: (partial: (InternalEventsType & InternalHazardsType & ExternalHazardsType & FullScopeType & ... 12 more ... & { ...; }) | Partial<...> | ((state: InternalEventsType & ... 15 more ... & { ...; }) => (InternalEventsType & ... 15 more ... & { ...; }) | Partial<...>), replace?: boolean | undefined) => void) => { ....' is not assignable to type '(setState: (partial: (InternalEventsType & InternalHazardsType & ExternalHazardsType & FullScopeType & ... 12 more ... & { ...; }) | Partial<...> | ((state: InternalEventsType & ... 15 more ... & { ...; }) => (InternalEventsType & ... 15 more ... & { ...; }) | Partial<...>), replace?: boolean | undefined) => void, g...'.
    Type '{ InternalHazards: typedModelType[]; SetInternalHazards: () => Promise<void>; AddInternalHazard: (data: Partial<TypedModelJSON>) => Promise<void>; EditInternalHazard: (modelId: string, userId: number, data: Partial<TypedModelJSON>) => Promise<void>; DeleteInternalHazard: (id: string) => Promise<void>; }' is not assignable to type 'InternalHazardsType & InternalHazardsActionsType'.
      Type '{ InternalHazards: typedModelType[]; SetInternalHazards: () => Promise<void>; AddInternalHazard: (data: Partial<TypedModelJSON>) => Promise<void>; EditInternalHazard: (modelId: string, userId: number, data: Partial<TypedModelJSON>) => Promise<void>; DeleteInternalHazard: (id: string) => Promise<void>; }' is not assignable to type 'InternalHazardsActionsType'.
        Types of property 'EditInternalHazard' are incompatible.
          Type '(modelId: string, userId: number, data: Partial<TypedModelJSON>) => Promise<void>' is not assignable to type '(modelId: number, userId: number, data: Partial<TypedModelJSON>) => Promise<void>'.
            Types of parameters 'modelId' and 'modelId' are incompatible.
              Type 'number' is not assignable to type 'string'.
    10 | import { InternalHazardsState } from "./InternalHazardsState";
    11 |
  > 12 | const InternalHazardsSlice: StateCreator<
       |       ^^^^^^^^^^^^^^^^^^^^
    13 |   StoreStateType & StoreActionType,
    14 |   [],
    15 |   [],

ERROR in ./packages/frontend/web-editor/src/app/zustand/NestedModels/NestedModelsSlice.tsx:38:11
TS2345: Argument of type '(set: (nextStateOrUpdater: (NestedModelsType & BayesianNetworksType & InitiatingEventsType & EventSequenceDiagramsType & EventSequenceAnalysisType & EventTreesType & FaultTreesType) | Partial<...> | ((state: WritableDraft<...>) => void), shouldReplace?: boolean | undefined) => void) => { ...; }' is not assignable to parameter of type 'StateCreator<NestedModelsType & BayesianNetworksType & InitiatingEventsType & EventSequenceDiagramsType & EventSequenceAnalysisType & EventTreesType & FaultTreesType, [...], []>'.
  Type '(set: (nextStateOrUpdater: (NestedModelsType & BayesianNetworksType & InitiatingEventsType & EventSequenceDiagramsType & EventSequenceAnalysisType & EventTreesType & FaultTreesType) | Partial<...> | ((state: WritableDraft<...>) => void), shouldReplace?: boolean | undefined) => void) => { ...; }' is not assignable to type '(setState: (nextStateOrUpdater: (NestedModelsType & BayesianNetworksType & InitiatingEventsType & EventSequenceDiagramsType & EventSequenceAnalysisType & EventTreesType & FaultTreesType) | Partial<...> | ((state: WritableDraft<...>) => void), shouldReplace?: boolean | undefined) => void, getState: () => NestedModels...'.
    Type '{ NestedModels: { parentId: string; OpStateAnalysis: string[]; InitiatingEventsAnalysis: { InitiatingEvents: NestedModelType[]; HeatBalanceFaultTrees: string[]; }; ... 15 more ...; RiskIntegration: { ...; }; }; ... 23 more ...; DeleteFaultTree: (id: string) => Promise<void>; }' is not assignable to type 'NestedModelsType & BayesianNetworksType & InitiatingEventsType & EventSequenceDiagramsType & EventSequenceAnalysisType & EventTreesType & FaultTreesType'.
      Type '{ NestedModels: { parentId: string; OpStateAnalysis: string[]; InitiatingEventsAnalysis: { InitiatingEvents: NestedModelType[]; HeatBalanceFaultTrees: string[]; }; ... 15 more ...; RiskIntegration: { ...; }; }; ... 23 more ...; DeleteFaultTree: (id: string) => Promise<void>; }' is not assignable to type 'NestedModelsType'.
        Types of property 'NestedModels' are incompatible.
          Property 'modelId' is missing in type '{ parentId: string; OpStateAnalysis: string[]; InitiatingEventsAnalysis: { InitiatingEvents: NestedModelType[]; HeatBalanceFaultTrees: string[]; }; EventSequenceAnalysis: { EventSequenceAnalysisList: NestedModelType[]; EventSequenceDiagrams: NestedModelType[]; EventTrees: NestedModelType[]; }; ... 14 more ...; RiskI...' but required in type 'NestedModelsStateType'.
    36 |   [["zustand/immer", never]],
    37 |   NestedModelsType & NestedModelActionsType
  > 38 | > = immer((set) => {
       |           ^^^^^^^^^^
    39 |   SliceResetFns.add(() => {
    40 |     set(NestedModelsState);
    41 |   });

ERROR in ./packages/frontend/web-editor/src/app/zustand/NestedModels/NestedModelsSlice.tsx:40:9
TS2345: Argument of type '{ NestedModels: { parentId: string; OpStateAnalysis: string[]; InitiatingEventsAnalysis: { InitiatingEvents: NestedModelType[]; HeatBalanceFaultTrees: string[]; }; EventSequenceAnalysis: { ...; }; ... 14 more ...; RiskIntegration: { ...; }; }; }' is not assignable to parameter of type '(NestedModelsType & BayesianNetworksType & InitiatingEventsType & EventSequenceDiagramsType & EventSequenceAnalysisType & EventTreesType & FaultTreesType) | Partial<...> | ((state: WritableDraft<...>) => void)'.
  Type '{ NestedModels: { parentId: string; OpStateAnalysis: string[]; InitiatingEventsAnalysis: { InitiatingEvents: NestedModelType[]; HeatBalanceFaultTrees: string[]; }; EventSequenceAnalysis: { ...; }; ... 14 more ...; RiskIntegration: { ...; }; }; }' is not assignable to type 'Partial<NestedModelsType & BayesianNetworksType & InitiatingEventsType & EventSequenceDiagramsType & EventSequenceAnalysisType & EventTreesType & FaultTreesType>'.
    Types of property 'NestedModels' are incompatible.
      Property 'modelId' is missing in type '{ parentId: string; OpStateAnalysis: string[]; InitiatingEventsAnalysis: { InitiatingEvents: NestedModelType[]; HeatBalanceFaultTrees: string[]; }; EventSequenceAnalysis: { EventSequenceAnalysisList: NestedModelType[]; EventSequenceDiagrams: NestedModelType[]; EventTrees: NestedModelType[]; }; ... 14 more ...; RiskI...' but required in type 'NestedModelsStateType'.
    38 | > = immer((set) => {
    39 |   SliceResetFns.add(() => {
  > 40 |     set(NestedModelsState);
       |         ^^^^^^^^^^^^^^^^^
    41 |   });
    42 |   return {
    43 |     NestedModels: NestedModelsState.NestedModels,

Found 41 errors in 685 ms.